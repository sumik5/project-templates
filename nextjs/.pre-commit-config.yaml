# Pre-commit hooks for Next.js project
# このファイルはNext.jsプロジェクトのコード品質を自動的にチェックします
#
# 🚀 セットアップ: mise run install
# 🔍 手動実行: pre-commit run --all-files
#
# 💡 ディレクトリに依存しない設計:
#   - git rev-parse --show-toplevelを使用して、どのディレクトリからcommitしても動作
#   - プロジェクトルートに自動的に移動してコマンド実行

repos:
  # Next.js用のローカルフック
  - repo: local
    hooks:
      # Prettier - コードフォーマット
      - id: prettier
        name: prettier
        entry: bash -c 'cd "$(git rev-parse --show-toplevel)" && pnpm fmt'
        language: system
        types_or: [javascript, jsx, ts, tsx, json, yaml, markdown, css]
        pass_filenames: false

      # ESLint - JavaScript/TypeScriptの静的解析
      - id: eslint
        name: eslint
        entry: bash -c 'cd "$(git rev-parse --show-toplevel)" && pnpm lint'
        language: system
        types_or: [javascript, jsx, ts, tsx]
        pass_filenames: false

      # TypeScript型チェック
      - id: typescript-check
        name: TypeScript Check
        entry: bash -c 'cd "$(git rev-parse --show-toplevel)" && pnpm tsc --noEmit'
        language: system
        files: \.(ts|tsx)$
        pass_filenames: false

      # Vitest - テスト実行
      - id: vitest
        name: vitest
        entry: bash -c 'cd "$(git rev-parse --show-toplevel)" && pnpm test'
        language: system
        types_or: [javascript, jsx, ts, tsx]
        pass_filenames: false

      # パッケージ依存関係チェック
      - id: package-lock-check
        name: Package Lock Check
        entry: bash -c 'cd "$(git rev-parse --show-toplevel)" && if [ -f pnpm-lock.yaml ]; then pnpm install --frozen-lockfile --dry-run; fi'
        language: system
        files: ^(package\.json|pnpm-lock\.yaml)$
        pass_filenames: false

  # 汎用フック（プロジェクト全体）
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # 末尾の空白を削除
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]

      # ファイル末尾に改行を追加
      - id: end-of-file-fixer

      # YAMLファイルの構文チェック
      - id: check-yaml

      # JSONファイルの構文チェック
      - id: check-json

      # TOMLファイルの構文チェック
      - id: check-toml

      # マージコンフリクトマーカーのチェック
      - id: check-merge-conflict

      # ケースの衝突をチェック
      - id: check-case-conflict

      # シンボリックリンクをチェック
      - id: check-symlinks

      # 実行可能ファイルのシェバンをチェック
      - id: check-executables-have-shebangs

      # 混在した改行コードをチェック
      - id: mixed-line-ending
        args: [--fix=lf]

      # 大きなファイルの追加をチェック（1MB以上）
      - id: check-added-large-files
        args: [--maxkb=1000]

  # ================================================================
  # 📦 Docker品質チェック
  # ================================================================
  # Dockerfileやdocker-compose.ymlの品質をチェック（全フォルダ対象）

  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      # Hadolint - Dockerfileのlint（全フォルダ対象）
      - id: hadolint-docker
        name: hadolint
        args: ['--failure-threshold', 'warning']
        files: .*Dockerfile.*

  - repo: local
    hooks:
      # Docker Compose構文チェック（全フォルダ対象）
      - id: docker-compose-check
        name: docker-compose validate
        entry: bash -c 'for file in "$@"; do docker compose -f "$file" config --quiet || exit 1; done'
        language: system
        files: .*docker-compose\.(yml|yaml)$
        pass_filenames: true

  # ================================================================
  # 🏗️ オプション: Terraform品質チェック
  # ================================================================
  # プロジェクトでTerraformを使用する場合は以下のコメントを解除してください
  #
  # - repo: https://github.com/antonbabenko/pre-commit-terraform
  #   rev: v1.96.2
  #   hooks:
  #     # Terraformコードのフォーマットチェック（全フォルダ対象）
  #     - id: terraform_fmt
  #       args: [--args=-recursive]
  #
  #     # Terraform設定の構文検証（全フォルダ対象）
  #     - id: terraform_validate
  #       args:
  #         - --hook-config=--retry-once-with-cleanup=true
  #         - --tf-init-args=-upgrade
  #
  #     # TFLint - Terraformのlintツール（全フォルダ対象）
  #     - id: terraform_tflint
  #       args:
  #         - --args=--config=__GIT_WORKING_DIR__/.tflint.hcl
  #         - --args=--call-module-type=all
  #
  #     # Checkov - セキュリティとベストプラクティスチェック（全フォルダ対象）
  #     - id: terraform_checkov
  #       args:
  #         - --args=--quiet
  #         - --args=--framework=terraform
  #         - --args=--skip-check=CKV_GCP_*
  #         - --args=--compact

# グローバル除外設定
exclude: |
  (?x)^(
    \.next/.*|
    node_modules/.*|
    build/.*|
    dist/.*|
    \.vercel/.*|
    \.turbo/.*|
    storybook-static/.*|
    coverage/.*|
    \.cache/.*|
    public/mockServiceWorker\.js|
    .*\.log|
    .*\.map
  )$

# パフォーマンス設定
default_install_hook_types: [pre-commit]
default_stages: [pre-commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0
