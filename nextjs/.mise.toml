# mise configuration for Next.js project
# mise は開発環境のツールバージョン管理とタスク実行を統一的に管理します
#
# 使い方:
#   mise run help     - 利用可能なコマンド一覧を表示
#   mise run install  - 初回セットアップ（依存関係とpre-commit hooks）
#   mise run dev      - 開発サーバー起動

[env]

[tasks.help]
description = "利用可能なコマンド一覧を表示"
run = "mise tasks"

# ==================== Setup Commands ====================
[tasks.install]
description = "依存関係とGit hooksのインストール"
alias = "setup"
run = """
#!/bin/bash
echo "🚀 Setting up development environment..."

# Install Node dependencies
echo "📦 Installing dependencies..."
pnpm install

# Setup environment files
echo "🔧 Setting up environment files..."
cp -n .env.example .env.local 2>/dev/null || true

# Install pre-commit hooks
echo "🪝 Installing pre-commit hooks..."
pre-commit install

echo "✅ Setup complete! Run 'mise run dev' to start"
"""

[tasks.clean-setup]
description = "クリーンセットアップ（node_modules削除して再インストール）"
run = """
#!/bin/bash
echo "🧹 Cleaning and reinstalling..."
rm -rf node_modules pnpm-lock.yaml package-lock.json yarn.lock
pnpm install
echo "✅ Clean setup complete!"
"""

# ==================== Development Commands ====================
[tasks.dev]
description = "開発サーバーを起動"
run = "pnpm dev"

[tasks.build]
description = "本番用ビルド"
run = "pnpm build"

[tasks.start]
description = "本番サーバーを起動"
run = "pnpm start"

[tasks.preview]
description = "本番ビルドをプレビュー"
run = """
#!/bin/bash
pnpm build && pnpm start
"""

# ==================== Testing Commands ====================
[tasks.test]
description = "テストを実行"
run = "pnpm test"

[tasks.test-watch]
description = "テストをwatchモードで実行"
run = "pnpm test --watch"

[tasks.test-ui]
description = "テストUIを起動"
run = "pnpm test:ui"

[tasks.test-coverage]
description = "カバレッジ付きでテストを実行"
run = "pnpm coverage"

[tasks.test-all]
description = "すべてのテストをカバレッジ付きで実行"
run = """
#!/bin/bash
echo "🧪 Running all tests..."
pnpm test --run
pnpm coverage
echo "✅ All tests complete!"
"""

# ==================== Code Quality Commands ====================
[tasks.lint]
description = "ESLintを実行"
run = "pnpm lint"

[tasks.lint-fix]
description = "ESLintで自動修正"
run = "pnpm lint --fix"

[tasks.format]
description = "Prettierでコードをフォーマット"
run = "pnpm prettier --write ."

[tasks.type-check]
description = "TypeScript型チェックを実行"
run = "pnpm tsc --noEmit"

[tasks.check-all]
description = "すべてのチェックを実行 via pre-commit"
run = "pre-commit run --all-files"

# ==================== pre-commit Commands ====================

[tasks.pre-commit]
description = "pre-commitチェックを手動実行"
run = "pre-commit run --all-files"

[tasks.pre-commit-update]
description = "pre-commitフックを最新バージョンに更新"
run = "pre-commit autoupdate"

[tasks.pre-commit-uninstall]
description = "pre-commitフックをアンインストール"
run = """
#!/bin/bash
echo "🗑️ Uninstalling pre-commit hooks..."
pre-commit uninstall
pre-commit uninstall --hook-type commit-msg
echo "✅ Pre-commit hooks uninstalled!"
"""

[tasks.pre-commit-clean]
description = "pre-commitを完全削除（フックとキャッシュ）"
run = """
#!/bin/bash
echo "🧹 Completely removing pre-commit..."
# Uninstall hooks
pre-commit uninstall 2>/dev/null || true
pre-commit uninstall --hook-type commit-msg 2>/dev/null || true
pre-commit uninstall --hook-type pre-push 2>/dev/null || true
# Remove cache
rm -rf ~/.cache/pre-commit 2>/dev/null || true
echo "✅ Pre-commit cache removed!"
"""

# ==================== Bundle Analysis ====================
[tasks.analyze]
description = "バンドルサイズを分析"
run = "ANALYZE=true pnpm build"
