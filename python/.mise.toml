# mise configuration for Python project
# mise は開発環境のツールバージョン管理とタスク実行を統一的に管理します
#
# 使い方:
#   mise run help     - 利用可能なコマンド一覧を表示
#   mise run install  - 初回セットアップ（依存関係とpre-commit hooks）
#   mise run dev      - 開発サーバー起動

# Settings
[settings]
experimental = true

# Environment variables
[env]
_.python.venv = { path = ".venv", create = true }

# Tools configuration
[tools]
python = "3.13"
pre-commit = "latest"

# =======================================================================
# Project Setup
# =======================================================================

# Installation tasks
[tasks.install]
description = "依存関係とGit hooksのインストール"
run = """
#!/bin/bash
echo "🚀 Setting up development environment..."
# Install dependencies
echo "📦 Installing dependencies..."
uv pip install -e .[dev]
# Install pre-commit hooks
echo "🪝 Installing pre-commit hooks..."
pre-commit install
echo "✅ Setup complete! Run 'mise run dev' to start"
"""

[tasks."install-prod"]
description = "本番用依存関係のみをインストール"
run = "uv pip install ."

# Development server
[tasks.dev]
description = "開発サーバーを起動"
run = "python -m src.main"

# =======================================================================
# Test
# =======================================================================

# Testing tasks
[tasks.test]
description = "全てのテストを実行"
run = "pytest"

[tasks."test:unit"]
description = "ユニットテストのみを実行"
run = "pytest -m unit"

[tasks."test:integration"]
description = "統合テストのみを実行"
run = "pytest -m integration"

[tasks.coverage]
description = "カバレッジレポート付きでテストを実行"
run = "pytest --cov=src --cov-report=html --cov-report=term"

# =======================================================================
# Linter
# =======================================================================

# Code quality tasks
[tasks.format]
description = "ruffでコードをフォーマット"
run = "ruff format src/ tests/"

[tasks."format:check"]
description = "コードフォーマットをチェック"
run = "ruff format --check src/ tests/"

[tasks.lint]
description = "リントチェックを実行"
run = """
ruff check src/ tests/
mypy src/
"""

[tasks."lint:fix"]
description = "リント問題を自動修正"
run = "ruff check --fix src/ tests/"

[tasks.typecheck]
description = "mypyで型チェックを実行"
run = "mypy src/"

[tasks.check]
description = "全ての品質チェックを実行（フォーマット、リント、型チェック、テスト）"
depends = ["format:check", "lint:fix", "typecheck", "test"]

[tasks.check-all]
description = "すべてのチェックを実行 via pre-commit"
run = "pre-commit run --all-files"

# =======================================================================
# pre-commit Commands
# =======================================================================

[tasks.pre-commit]
description = "pre-commitチェックを手動実行"
run = "pre-commit run --all-files"

[tasks.pre-commit-update]
description = "pre-commitフックを最新バージョンに更新"
run = "pre-commit autoupdate"

[tasks.pre-commit-uninstall]
description = "pre-commitフックをアンインストール"
run = """
#!/bin/bash
echo "🗑️ Uninstalling pre-commit hooks..."
pre-commit uninstall
pre-commit uninstall --hook-type commit-msg
echo "✅ Pre-commit hooks uninstalled!"
"""

[tasks.pre-commit-clean]
description = "pre-commitを完全削除（フックとキャッシュ）"
run = """
#!/bin/bash
echo "🧹 Completely removing pre-commit..."
# Uninstall hooks
pre-commit uninstall 2>/dev/null || true
pre-commit uninstall --hook-type commit-msg 2>/dev/null || true
pre-commit uninstall --hook-type pre-push 2>/dev/null || true
# Remove cache
rm -rf ~/.cache/pre-commit 2>/dev/null || true
echo "✅ Pre-commit cache removed!"
"""

# =======================================================================
# Build & Cleanup
# =======================================================================

# Build tasks
#[tasks.build]
#description = "Dockerイメージをビルド"
#run = "docker build -t image:local ."

# Cleanup tasks
[tasks.clean]
description = "ビルド成果物とキャッシュをクリーンアップ"
run = """
rm -rf build/
rm -rf dist/
rm -rf *.egg-info
rm -rf .pytest_cache
rm -rf .ruff_cache
rm -rf .mypy_cache
rm -rf htmlcov/
rm -rf .coverage
find . -type d -name __pycache__ -exec rm -rf {} +
"""
