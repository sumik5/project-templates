[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "project-name"
version = "1.0.0"
description = "description"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "Proprietary"}
authors = [
    {name = "author"}
]

dependencies = [
]

[project.optional-dependencies]
dev = [
    # Build tools
    "hatchling>=1.18.0",

    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=5.0.0",

    # Code quality
    "ruff>=0.7.0",
    "mypy>=1.13.0",

    # Type stubs
    "types-requests>=2.31.0",
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "-p", "no:warnings",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "skip_ci: Skip in CI environment",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"


# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]
precision = 2
show_missing = true

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py313"

# Exclude directories
extend-exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".tox",
    ".venv",
    "venv",
    "_build",
    "buck-out",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable flake8 rules + isort
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
]

# Ignore specific rules
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by formatter)
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Ignore unused imports in __init__.py
"__init__.py" = ["F401"]
# Ignore N805 (first argument naming) for Pydantic validators
"src/config.py" = ["N805"]
# Ignore naming convention and module-level imports in tests
"tests/conftest.py" = ["N806", "E402"]
# Ignore N806 (Mock variable naming) in test files
"tests/**/*.py" = ["N806"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use spaces for indentation
indent-style = "space"
# Respect magic trailing comma
skip-magic-trailing-comma = false
# Auto-detect line ending
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
ignore_missing_imports = true
explicit_package_bases = true
exclude = ["^build/", "^dist/", "^\\.venv/"]

[[tool.mypy.overrides]]
module = [
]
ignore_missing_imports = true

# Hatchling build configuration
[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
]
